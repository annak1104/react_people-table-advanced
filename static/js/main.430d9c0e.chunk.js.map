{"version":3,"sources":["components/Navigation.tsx","App.tsx","pages/HomePage.tsx","components/Loader/Loader.tsx","utils/constants.tsx","components/PersonLink.tsx","components/PersonItem.tsx","components/PeopleTable.tsx","api.ts","utils/findPeopleByName.tsx","utils/searchHelper.ts","components/SearchLink.tsx","types/FilterParams.tsx","types/Sex.tsx","components/PeopleFilters.tsx","utils/filterTableOfPeople.tsx","pages/PeoplePage.tsx","pages/PageNotFound.tsx","Root.tsx","index.tsx"],"names":["Navigation","getLinkClass","isActive","cn","className","role","to","App","HomePage","Loader","COLUMN_NAMES","PersonLink","person","slug","sex","name","PersonItem","selectedPerson","born","died","mother","father","fatherName","motherName","PeopleTable","people","useParams","personId","map","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","getPreparedPeople","find","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","FilterParam","Sex","PeopleFilters","setSearchParams","query","get","Query","selectedCenturies","getAll","Centuries","handleCenturiesChange","century","includes","filter","year","classNames","Male","Femail","type","placeholder","onChange","event","target","filterTableOfPeople","centuries","sortField","order","tempPeople","length","Math","ceil","getCentury","lowerQuery","toLocaleLowerCase","join","sort","a","b","localeCompare","reverse","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","Order","Sort","filtredPeople","fetchData","peopleFromServer","useEffect","IS_TABLE_EMPTY","IS_LOADING_ERROR","HAS_PEOPLE_LIST","PageNotFound","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.430d9c0e.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navigation = () => {\n  const getLinkClass = ({ isActive }: { isActive: boolean }) => cn(\n    'navbar-item',\n    { 'has-background-grey-lighter': isActive },\n  );\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Outlet } from 'react-router-dom';\nimport { Navigation } from './components/Navigation';\n\nexport const App: React.FC = () => (\n  <div data-cy=\"app\">\n    <Navigation />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage = () => {\n  return (\n    <>\n      <h1 className=\"title\">Home Page</h1>\n    </>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const COLUMN_NAMES = [\n  'Name',\n  'Sex',\n  'Born',\n  'Died',\n  'Mother',\n  'Father',\n];\n\nexport const SEX_FEMALE = 'f';\nexport const SEX_MALE = 'f';\n\nexport const NOT_SET_VALUE = '-';\n","import cn from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\nimport { SEX_FEMALE } from '../utils/constants';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => (\n  <Link\n    to={person.slug}\n    className={cn({\n      [person.sex === SEX_FEMALE ? 'has-text-danger' : 'has-text-link']: true,\n    })}\n  >\n    {person.name}\n  </Link>\n);\n","import cn from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { NOT_SET_VALUE } from '../utils/constants';\n\ntype Props = {\n  person: Person;\n  selectedPerson: string;\n};\n\nexport const PersonItem: React.FC<Props> = ({ person, selectedPerson }) => {\n  const {\n    sex,\n    born,\n    died,\n    mother,\n    father,\n    fatherName,\n    motherName,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={\n        cn({\n          'has-background-warning': selectedPerson === person.slug,\n        })\n      }\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother\n          ? (\n            <PersonLink person={mother} />\n          ) : (\n            motherName || NOT_SET_VALUE\n          )}\n      </td>\n      <td>\n        {father\n          ? (\n            <PersonLink person={father} />\n          ) : (\n            fatherName || NOT_SET_VALUE\n          )}\n      </td>\n    </tr>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonItem } from './PersonItem';\nimport { COLUMN_NAMES } from '../utils/constants';\n\nexport const PeopleTable = ({ people }: { people: Person[] }) => {\n  const { personId = '' } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {COLUMN_NAMES.map(name => (\n            <th key={name}>{name}</th>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => (\n          <PersonItem\n            person={person}\n            key={person.slug}\n            selectedPerson={personId}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../types';\n\nexport const getPreparedPeople = (people: Person[]): Person[] => {\n  return people.map(person => {\n    return {\n      ...person,\n      mother: people.find(({ name }) => name === person.motherName),\n      father: people.find(({ name }) => name === person.fatherName),\n    };\n  });\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum FilterParam {\n  Centuries = 'centuries',\n  Query = 'query',\n  Sex = 'sex',\n  Sort = 'sort',\n  Order = 'order',\n}\n","export enum Sex{\n  Femail = 'f',\n  Male = 'm',\n}\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { FilterParam } from '../types/FilterParams';\nimport { Sex } from '../types/Sex';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const CENTURIES = ['16', '17', '18', '19', '20'];\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get(FilterParam.Query) || '';\n  const selectedCenturies = searchParams.getAll(FilterParam.Centuries) || [];\n  const sex = searchParams.get(FilterParam.Sex) || '';\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(getSearchWith(searchParams, {\n      [FilterParam.Query]: event.target.value || null,\n    }));\n  };\n\n  const handleCenturiesChange = (century: string) => {\n    return (\n      selectedCenturies.includes(century)\n        ? selectedCenturies.filter(year => year !== century)\n        : [...selectedCenturies, century]\n    );\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': sex === null })}\n          params={{ [FilterParam.Sex]: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': sex === Sex.Male })}\n          params={{ [FilterParam.Sex]: Sex.Male }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': sex === Sex.Femail })}\n          params={{ [FilterParam.Sex]: Sex.Femail }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={\n                  classNames('button', 'mr-1', {\n                    'is-info': selectedCenturies.includes(century),\n                  })\n                }\n                params={{\n                  [FilterParam.Centuries]: handleCenturiesChange(century),\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ [FilterParam.Centuries]: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            [FilterParam.Centuries]: [],\n            [FilterParam.Query]: null,\n            [FilterParam.Sex]: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from '../types';\n\nexport const filterTableOfPeople = (\n  people: Person[],\n  sex: string | null,\n  query: string | null,\n  centuries: string[],\n  sortField: string | null,\n  order: string | null,\n) => {\n  let tempPeople = [...people];\n\n  if (sex) {\n    tempPeople = tempPeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    const getCentury = (person: Person) => Math.ceil(person.born / 100);\n\n    tempPeople = tempPeople.filter(\n      person => centuries.includes(\n        getCentury(person).toString(),\n      ),\n    );\n  }\n\n  if (query) {\n    const lowerQuery = query.toLocaleLowerCase();\n\n    tempPeople = tempPeople.filter((person) => {\n      const searchableStrings = [\n        person.name,\n        person.motherName || '',\n        person.fatherName || '',\n      ];\n\n      const combinedString = searchableStrings.join(' ').toLocaleLowerCase();\n\n      return combinedString.includes(lowerQuery);\n    });\n  }\n\n  if (sortField) {\n    tempPeople.sort((a, b) => {\n      switch (sortField) {\n        case 'name':\n        case 'sex':\n          return a[sortField].localeCompare(b[sortField]);\n\n        case 'born':\n        case 'died':\n          return a[sortField] - b[sortField];\n\n        default:\n          return 0;\n      }\n    });\n\n    if (order === 'desc') {\n      tempPeople.reverse();\n    }\n  }\n\n  return tempPeople;\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { getPreparedPeople } from '../utils/findPeopleByName';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { filterTableOfPeople } from '../utils/filterTableOfPeople';\nimport { FilterParam } from '../types/FilterParams';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [searchParams] = useSearchParams();\n  const sex = searchParams.get(FilterParam.Sex);\n  const order = searchParams.get(FilterParam.Order);\n  const query = searchParams.get(FilterParam.Query);\n  const centuries = searchParams.getAll(FilterParam.Centuries);\n  const sortField = searchParams.get(FilterParam.Sort);\n\n  const filtredPeople = filterTableOfPeople(\n    people,\n    sex,\n    query,\n    centuries,\n    sortField,\n    order,\n  );\n\n  const fetchData = async () => {\n    try {\n      setIsLoading(true);\n      const peopleFromServer = await getPeople();\n\n      setPeople(getPreparedPeople(peopleFromServer));\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const IS_TABLE_EMPTY = !people.length && !isLoading && !isError;\n  const IS_LOADING_ERROR = isError && !isLoading;\n  const HAS_PEOPLE_LIST = !!people?.length && !isError;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!!people.length && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"box table-container\">\n            {isLoading && (\n              <Loader />\n            )}\n\n            {IS_LOADING_ERROR && (\n              <p\n                data-cy=\"peopleLoadingError\"\n                className=\"has-text-danger\"\n              >\n                Something went wrong\n              </p>\n            )}\n\n            {IS_TABLE_EMPTY && (\n              <p\n                data-cy=\"noPeopleMessage\"\n              >\n                There are no people on the server\n              </p>\n            )}\n\n            {HAS_PEOPLE_LIST && (\n              <PeopleTable people={filtredPeople} />\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nexport const PageNotFound: React.FC = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\n\nimport { App } from './App';\n\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { PageNotFound } from './pages/PageNotFound';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route path=\"*\" element={<PageNotFound />} />\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\" element={<PeoplePage />}>\n          <Route path=\":personId?\" />\n        </Route>\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}